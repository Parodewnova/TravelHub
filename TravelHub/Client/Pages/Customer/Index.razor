@page "/customer/"
@using Microsoft.AspNetCore.Authorization;
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorServices _interceptor
@implements IDisposable
@attribute [Authorize]

<h3 class="card-title">Customers</h3>
<br />
<a href="/customer/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Customer
</a>
<br />
<br />

@if (Customers == null)
{
    <div class="alert alert-info">Loading Customers...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Number</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Customers)
            {
                <tr>
                    <td>@customer.Name</td>
                    <td>@customer.Address</td>
                    <td>@customer.Number</td>
                    <td>
                        <a href="/customer/view/@customer.CustomerID" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/customer/edit/@customer.CustomerID" class="btn btn-primary">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(customer.CustomerID))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Customer> Customers;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndPoint}");
    }

    async Task Delete(int custID)
    {
        var customer = Customers.First(q => q.CustomerID == custID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {customer.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.CustomersEndPoint}/{custID}");
            await OnInitializedAsync();
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }

}
