@page "/activity/"
@using Microsoft.AspNetCore.Authorization;
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Activites</h3>
<br />
<a href="/activity/create/" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Activites
</a>
<br />
<br />

@if (Activites == null)
{
    <div class="alert alert-info">Loading Activites...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Price</th>
                <th>Rating</th>
                <th>Location</th>
                <th>Done By</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in Activites)
            {
                <tr>
                    <td>@activity.Name</td>
                    <td>@activity.Type</td>
                    <td>@activity.Price</td>
                    <td>@activity.Rating</td>
                    <td>@activity.Location.Name</td>
                    <td>@activity.Staff.Name</td>
                    <td>
                        <a href="/activity/view/@activity.ActivityID" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/activity/edit/@activity.ActivityID" class="btn btn-primary">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(activity.ActivityID))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Activity> Activites;

    protected async override Task OnInitializedAsync()
    {
        Activites = await _client.GetFromJsonAsync<List<Activity>>($"{Endpoints.ActivitiesEndPoint}");
    }

    async Task Delete(int activityID)
    {
        var activity = Activites.First(q => q.ActivityID == activityID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {activity.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ActivitiesEndPoint}/{activityID}");
            await OnInitializedAsync();
        }
    }

}
